{"version":3,"file":"static/js/541.83f14b4e.chunk.js","mappings":"8LAgDA,UA7Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAoBpB,OAnBAI,EAAAA,EAAAA,YAAU,WACMC,EAAQ,IAYtBC,CAVS,sCAAAC,OAAyCX,EAAO,YACzC,CACdY,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAKHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBF,MAAK,SAAAE,GAAI,OAAIX,GAAOY,EAAAA,EAAAA,GAAKD,EAAKZ,KAAKc,OAAO,EAAG,IAAI,IACjDC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAM,SAAWF,EAAI,GAC/C,GAAG,CAACtB,KAGFyB,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAYD,SACvBpB,EAAKsB,KAAI,SAAAC,GACR,OACEC,EAAAA,EAAAA,MAAA,MAAmBH,UAAU,aAAYD,SAAA,CACtCG,EAAME,eACLN,EAAAA,EAAAA,KAAA,OACEO,IAAG,kCAAArB,OAAoCkB,EAAME,cAC7CE,IAAKJ,EAAMK,KACXC,MAAM,QAGVV,EAAAA,EAAAA,KAAA,MAAAC,SAAKG,EAAMK,QACXJ,EAAAA,EAAAA,MAAA,KAAGH,UAAU,UAASD,SAAA,CAAC,cAAYG,EAAMO,eATlCP,EAAMQ,GAYnB,OAIR,C,sBC3CA,IAUIC,EAVY,WAIf,GAAoB,qBAATC,KAAwB,OAAOA,KAC1C,GAAsB,qBAAXC,OAA0B,OAAOA,OAC5C,GAAsB,qBAAXC,EAAAA,EAA0B,OAAOA,EAAAA,EAC5C,MAAM,IAAIC,MAAM,iCACjB,CAEmBC,GAEnBC,EAAOC,QAAUA,EAAUP,EAAa5B,MAGpC4B,EAAa5B,QAChBmC,EAAAA,QAAkBP,EAAa5B,MAAMoC,KAAKR,IAG3CO,EAAQE,QAAUT,EAAaS,QAC/BF,EAAQG,QAAUV,EAAaU,QAC/BH,EAAQI,SAAWX,EAAaW,Q","sources":["components/Cast/Cast.js","../node_modules/node-fetch/browser.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    const fetch = require('node-fetch');\n\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkMmY4ZmJiYzMwMTNlY2I1MDY0MGFmMDE0NDA1Nzc0YyIsInN1YiI6IjY0YjRlYTdiNjI5YjJjMDEzYzQzMDJhZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.GHtJMZzPbE8SRwlwTEx3-peT33LPisCOv3lEOiFCJVM',\n      },\n    };\n\n    fetch(url, options)\n      .then(res => res.json())\n      .then(json => setCast([...json.cast.splice(0, 8)]))\n      .catch(err => console.error('error:' + err));\n  }, [movieId]);\n\n  return (\n    <div>\n      <ul className=\"cast__list\">\n        {cast.map(actor => {\n          return (\n            <li key={actor.id} className=\"cast__item\">\n              {actor.profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w780${actor.profile_path}`}\n                  alt={actor.name}\n                  width=\"80\"\n                ></img>\n              )}\n              <h4>{actor.name}</h4>\n              <p className=\"caption\">Character: {actor.character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","require","fetch","concat","method","headers","accept","Authorization","then","res","json","_toConsumableArray","splice","catch","err","console","error","_jsx","children","className","map","actor","_jsxs","profile_path","src","alt","name","width","character","id","globalObject","self","window","global","Error","getGlobal","module","exports","bind","Headers","Request","Response"],"sourceRoot":""}